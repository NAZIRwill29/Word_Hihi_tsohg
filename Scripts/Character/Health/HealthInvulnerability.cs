using System;
using System.Linq;
using UnityEngine;

/// <summary>
/// Component that can temporarily disable the taking damage in a Health component.
/// </summary>
public class HealthInvulnerability : MonoBehaviour
{
    [Header("Visuals")]
    [Tooltip("Particle effect to indicate PowerUp is active")]
    [SerializeField] private ParticleSystem m_ParticleSystem;
    private float m_Timer;
    [SerializeField] private ObjectHealth m_ObjectHealth;

    private void Awake()
    {
        if (m_ParticleSystem)
            m_ParticleSystem.Stop();
    }

    private void Update()
    {
        if (GameManager.Instance.IsPause) return;
        // If invulnerability is active, count down the timer.
        if (m_ObjectHealth.IsInvulnerable)
        {
            m_Timer -= Time.deltaTime;

            // If the timer has expired, deactivate invulnerability.
            if (m_Timer <= 0)
            {
                m_ObjectHealth.IsInvulnerable = false;

                Debug.Log("Invulnerability deactivated");

                if (m_ParticleSystem)
                    m_ParticleSystem.Stop();
            }
        }
    }

    public void Activate(float duration = 0)
    {
        // Set the timer and activate invulnerability.
        if (duration != 0)
            m_Timer = duration;
        else
            m_Timer = VariableFinder.GetVariableContainNameFromList(m_ObjectHealth.StatsData.DataNumVars, "Invincible").TimeCoolDown;
        //m_Timer = m_ObjectHealth.StatsData.DataNumVars.FirstOrDefault(v => v.Name.Equals("Invincible", StringComparison.OrdinalIgnoreCase)).TimeCoolDown;

        m_ObjectHealth.IsInvulnerable = true;

        Debug.Log("Invulnerability activated");

        if (m_ParticleSystem)
            m_ParticleSystem.Play();
    }
}
